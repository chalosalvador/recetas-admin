{"ast":null,"code":"import \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport _classCallCheck from \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\react-boilerplate-master\\\\src\\\\components\\\\AddChefsForm.js\";\n\n/*\n<Form>\n      <Form.Item>\n        <Input prefix={ <Icon type='user' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Nombre Completos' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Especialidad' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='number' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='number'\n                       placeholder='Experiencia' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Nacionalidad' />\n      </Form.Item>\n      <Form.Item>\n        <Input name='trabajo' prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Trabajo Actual' />\n      </Form.Item>\n      <Form.Item>\n        <Button type='primary'\n                  htmlType='submit'\n            >Registrar</Button>\n      </Form.Item>\n    </Form>*/\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { saveChefsData } from '../firebase';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport { startSetLoginState } from '../actions/authActions';\nimport { translateMessage } from '../helpers/translateMessage';\n\nvar hasErrors = function hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(function (field) {\n    return fieldsError[field];\n  });\n};\n\nvar AddChefsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddChefsForm, _Component);\n\n  function AddChefsForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddChefsForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddChefsForm).call(this, props));\n    _this.initialState = {\n      nombres: '',\n      especialidad: '',\n      experiencia: '',\n      trabajoActual: '',\n      nacionalidad: ''\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          var nombres = values.nombres,\n              especialidad = values.especialidad,\n              experiencia = values.experiencia,\n              trabajoActual = values.trabajoActual,\n              nacionalidad = values.nacionalidad;\n          saveChefsData(nombres, especialidad, experiencia, trabajoActual, nacionalidad).catch(function (error) {\n            console.log('error', error);\n\n            _message.error(translateMessage(error.code));\n          });\n        }\n\n        ;\n      });\n    };\n\n    _this.state = _this.initialState;\n    return _this;\n  }\n\n  _createClass(AddChefsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // To disabled submit button at the beginning.\n      this.props.form.validateFields();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldsError = _this$props$form.getFieldsError,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldTouched = _this$props$form.isFieldTouched; // Only show error after a field is touched.\n\n      var nombresError = isFieldTouched('nombres') && getFieldError('nombres');\n      var especialidadError = isFieldTouched('especialidad') && getFieldError('especialidad');\n      var experienciaError = isFieldTouched('experiencia') && getFieldError('experiencia');\n      var trabajoActualError = isFieldTouched('trabajoActual') && getFieldError('trabajoActual');\n      var nacionalidadError = isFieldTouched('nacionalidad') && getFieldError('nacionalidad');\n      return React.createElement(_Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        validateStatus: nombresError ? 'error' : '',\n        help: nombresError || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, getFieldDecorator('nombres', {\n        rules: [{\n          type: 'text',\n          message: 'Ingresa nombres v치lidos'\n        }, {\n          required: true,\n          message: 'Ingresa nombres v치lidos'\n        }]\n      })(React.createElement(_Input, {\n        prefix: React.createElement(_Icon, {\n          type: \"user\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }),\n        type: \"text\",\n        placeholder: \"Nombre Completos\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        validateStatus: especialidadError ? 'error' : '',\n        help: especialidadError || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, getFieldDecorator('especialidad', {\n        rules: [{\n          type: 'text',\n          message: 'Ingresa nombres v치lidos'\n        }, {\n          required: true,\n          message: 'Ingresa nombres v치lidos'\n        }]\n      })(React.createElement(_Input, {\n        prefix: React.createElement(_Icon, {\n          type: \"user\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }),\n        type: \"text\",\n        placeholder: \"Especialidad\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AddChefsForm;\n}(Component);\n\nexport default compose(withRouter, _Form.create({\n  name: 'chef_form'\n}))(AddChefsForm);","map":{"version":3,"sources":["C:\\Users\\LENOVO\\Documents\\react-boilerplate-master\\src\\components\\AddChefsForm.js"],"names":["React","Component","withRouter","saveChefsData","compose","connect","startSetLoginState","translateMessage","hasErrors","fieldsError","Object","keys","some","field","AddChefsForm","props","initialState","nombres","especialidad","experiencia","trabajoActual","nacionalidad","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","catch","error","code","state","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","nombresError","especialidadError","experienciaError","trabajoActualError","nacionalidadError","rules","type","message","required","color","create","name"],"mappings":"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","sourcesContent":["/*\n<Form>\n      <Form.Item>\n        <Input prefix={ <Icon type='user' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Nombre Completos' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Especialidad' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='number' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='number'\n                       placeholder='Experiencia' />\n      </Form.Item>\n      <Form.Item>\n        <Input prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Nacionalidad' />\n      </Form.Item>\n      <Form.Item>\n        <Input name='trabajo' prefix={ <Icon type='text' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Trabajo Actual' />\n      </Form.Item>\n      <Form.Item>\n        <Button type='primary'\n                  htmlType='submit'\n            >Registrar</Button>\n      </Form.Item>\n    </Form>*/\n\n\n\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Form, Icon, Input, message } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport { saveChefsData } from '../firebase';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport { startSetLoginState } from '../actions/authActions';\nimport { translateMessage } from '../helpers/translateMessage';\n\nconst hasErrors = ( fieldsError ) => {\n  return Object.keys( fieldsError ).some( field => fieldsError[ field ] );\n};\n\nclass AddChefsForm extends Component {\n\n  initialState = {\n    nombres: '',\n    especialidad: '',\n    experiencia: '',\n    trabajoActual: '', \n    nacionalidad:''\n\n  };\n\n  constructor( props ) {\n    super( props );\n    this.state = this.initialState;\n  }\n\n  componentDidMount() {\n    // To disabled submit button at the beginning.\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = ( e ) => {\n    e.preventDefault();\n    this.props.form.validateFields( ( err, values ) => {\n      if( !err ) {\n        console.log( 'Received values of form: ', values );\n        const { nombres, especialidad, experiencia, trabajoActual, nacionalidad } = values;\n\n\n        saveChefsData(nombres, especialidad, experiencia, trabajoActual, nacionalidad)\n\n          .catch( error => {\n            console.log( 'error', error );\n            message.error( translateMessage( error.code ) );\n          });\n      };\n    } );\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const nombresError = isFieldTouched( 'nombres' ) && getFieldError( 'nombres' );\n    const especialidadError = isFieldTouched( 'especialidad' ) && getFieldError( 'especialidad' );\n    const experienciaError = isFieldTouched( 'experiencia' ) && getFieldError( 'experiencia' );\n    const trabajoActualError = isFieldTouched( 'trabajoActual' ) && getFieldError( 'trabajoActual' );\n    const nacionalidadError = isFieldTouched( 'nacionalidad' ) && getFieldError( 'nacionalidad' );\n\n\n    return (\n      <Form onSubmit={ this.handleSubmit } >\n      \n        <Form.Item validateStatus={ nombresError\n          ? 'error'\n          : '' }\n                   help={ nombresError || '' }>\n          { getFieldDecorator( 'nombres', {\n            rules: [\n              {\n                type: 'text',\n                message: 'Ingresa nombres v치lidos'\n              },\n              {\n                required: true,\n                message: 'Ingresa nombres v치lidos'\n              }\n            ]\n          } )(\n            <Input prefix={ <Icon type='user' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Nombre Completos' />\n          ) }\n        \n        </Form.Item>\n        <Form.Item validateStatus={ especialidadError\n          ? 'error'\n          : '' }\n                   help={ especialidadError || '' }>\n          { getFieldDecorator( 'especialidad', {\n            rules: [\n              {\n                type: 'text',\n                message: 'Ingresa nombres v치lidos'\n              },\n              {\n                required: true,\n                message: 'Ingresa nombres v치lidos'\n              }\n            ]\n          } )(\n            <Input prefix={ <Icon type='user' style={ { color: 'rgba(0,0,0,.25)' } } /> }\n                       type='text'\n                       placeholder='Especialidad' />\n          ) }\n        \n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\n\nexport default compose(withRouter, Form.create({name:'chef_form'}))(AddChefsForm);\n"]},"metadata":{},"sourceType":"module"}